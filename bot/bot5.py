import praw
import random
import datetime
import time
import markovify

def score(comment):
    scores=comment.score
    #print('comment.score=',comment.score)
    return scores

reddit = praw.Reddit('bot5',user_agent='cs40')
submission_url = 'https://old.reddit.com/r/BotTownGarden/comments/r1ju5y/watch_trump_shrug_when_fox_news_reminds_him_kim/'
submission = reddit.submission(url=submission_url)


while True:

    print()
    print('new iteration at:',datetime.datetime.now())
    print('submission.title=',submission.title)
    print('submission.url=',submission.url)

    submission.comments.replace_more(limit=None)
    all_comments=submission.comments.list()
    
    with open("Biden1.txt") as f:
        text=f.read()

    with open("Biden2.txt") as f:
        text+=f.read()

    with open("Biden3.txt") as f:
        text+=f.read()
        

    mark=''
    text_model=markovify.Text(text, state_size=2)

    for i in range(5):
        #print(text_model.make_sentence())
        mark+=' '+ str(text_model.make_sentence(tries=20))
    print('mark=', mark)
    
    # HINT: 
    # we need to make sure that our code is working correctly,
    # and you should not move on from one task to the next until you are 100% sure that 
    # the previous task is working;
    # in general, the way to check if a task is working is to print out information 
    # about the results of that task, 
    # and manually inspect that information to ensure it is correct; 
    # in this specific case, you should check the length of the all_comments variable,
    # and manually ensure that the printed length is the same as the length displayed on reddit;
    # if it's not, then there are some comments that you are not correctly identifying,
    # and you need to figure out which comments those are and how to include them.
    print('len(all_comments)=',len(all_comments))

    # FIXME (task 1): filter all_comments to remove comments that were generated by your bot
    # HINT: 
    # use a for loop to loop over each comment in all_comments,
    # and an if statement to check whether the comment is authored by you or not
    not_my_comments = []
    for comment in all_comments:
        if str(comment.author)!='botinayacht':
            not_my_comments.append(comment)

    print('len(not_my_comments)=',len(not_my_comments))

    has_not_commented = len(not_my_comments) == len(all_comments)
    print('has_not_commented=', has_not_commented)
    

    
    if has_not_commented:
    
    # FIXME (task 2)
        # if you have not made any comment in the thread, then post a top level comment
        
        submission.reply(mark)
        time.sleep(1)
        pass
    
    
    else:
    
    # FIXME (task 3): filter the not_my_comments list to also remove comments that 
        # you've already replied to
        
        comments_without_replies = []
        for comment in not_my_comments:
            replied=False
            for reply in list(comment.replies):
                if str(reply.author)=='botinayacht':
                    replied=True
            if replied==False:
                comments_without_replies.append(comment)

        print('len(comments_without_replies)=',len(comments_without_replies))


        # FIXME (task 4): randomly select a comment from the comments_without_replies list,
        # and reply to that comment

        if len(comments_without_replies)>0:
            #comment=random.choice(comments_without_replies)
            #comment=sorted(scores,key=score,reverse=True)
            try:
                comment=sorted(comments_without_replies,key=lambda comments: comments.score,reverse=True)[0]
                comment.reply(mark)
            except praw.exceptions.APIException:
                pass
            time.sleep(10)


    # FIXME (task 5): select a new submission for the next iteration;
    # your newly selected submission should be randomly selected from the 5 hottest submissions
    subreddit = reddit.subreddit("BotTownGarden")
    hot= list(subreddit.hot(limit=5))
    submission=random.choice(hot)

    time.sleep(10)
